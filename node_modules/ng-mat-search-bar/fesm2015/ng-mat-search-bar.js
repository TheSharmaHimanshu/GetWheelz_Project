import { __decorate } from 'tslib';
import { CommonModule } from '@angular/common';
import { EventEmitter, ViewChild, Input, Output, Component, forwardRef, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatRippleModule } from '@angular/material/core';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { trigger, state, style, transition, animate } from '@angular/animations';

class AbstractControlValueAccessor {
    constructor() {
        /**
         * Invoked when the model has been changed
         */
        this.onChange = (_) => { };
        /**
         * Invoked when the model has been touched
         */
        this.onTouched = () => { };
    }
    /**
     * Method that is invoked on an update of a model.
     */
    updateChanges() {
        this.onChange(this.value);
    }
    /**
     * Writes a new item to the element.
     * @param value the value
     */
    writeValue(value) {
        this.value = value;
        this.updateChanges();
    }
    /**
     * Registers a callback function that should be called when the control's value changes in the UI.
     * @param fn
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * Registers a callback function that should be called when the control receives a blur event.
     * @param fn
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}

var MatSearchBarComponent_1;
let MatSearchBarComponent = MatSearchBarComponent_1 = class MatSearchBarComponent extends AbstractControlValueAccessor {
    constructor() {
        super(...arguments);
        this.placeholder = '';
        this.onBlur = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onEnter = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onOpen = new EventEmitter();
        this.searchVisible = false;
    }
    close() {
        this.searchVisible = false;
        this.value = '';
        this.updateChanges();
        this.onClose.emit();
    }
    open() {
        this.searchVisible = true;
        this.inputElement.nativeElement.focus();
        this.onOpen.emit();
    }
    onBlurring(searchValue) {
        if (!searchValue) {
            this.searchVisible = false;
        }
        this.onBlur.emit(searchValue);
    }
    onEnterring(searchValue) {
        this.onEnter.emit(searchValue);
    }
    onFocussing(searchValue) {
        this.onFocus.emit(searchValue);
    }
};
__decorate([
    ViewChild('input', { static: false })
], MatSearchBarComponent.prototype, "inputElement", void 0);
__decorate([
    Input()
], MatSearchBarComponent.prototype, "formControl", void 0);
__decorate([
    Input()
], MatSearchBarComponent.prototype, "placeholder", void 0);
__decorate([
    Output()
], MatSearchBarComponent.prototype, "onBlur", void 0);
__decorate([
    Output()
], MatSearchBarComponent.prototype, "onClose", void 0);
__decorate([
    Output()
], MatSearchBarComponent.prototype, "onEnter", void 0);
__decorate([
    Output()
], MatSearchBarComponent.prototype, "onFocus", void 0);
__decorate([
    Output()
], MatSearchBarComponent.prototype, "onOpen", void 0);
MatSearchBarComponent = MatSearchBarComponent_1 = __decorate([
    Component({
        selector: 'mat-search-bar',
        template: "<mat-form-field *ngIf=\"!formControl\" class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (ngModelChange)=\"updateChanges()\"\n    (blur)=\"onBlurring(input.value)\" (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n<!-- FORM CONTROL WAY -->\n<mat-form-field *ngIf=\"formControl\" class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" [placeholder]=\"placeholder\" [formControl]=\"formControl\" (blur)=\"onBlurring(input.value)\"\n    (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>close</mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>search</mat-icon>\n</span>\n",
        animations: [
            trigger('slideInOut', [
                state('true', style({ width: '*' })),
                state('false', style({ width: '0' })),
                transition('true => false', animate('300ms ease-in')),
                transition('false => true', animate('300ms ease-out'))
            ])
        ],
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => MatSearchBarComponent_1),
                multi: true
            }
        ],
        styles: [":host{position:relative;display:flex;flex-direction:row;align-items:center;justify-content:flex-end;width:24px;height:24px}.mat-search_field{position:absolute;z-index:1;padding:0 24px 0 0}.mat-search_icons{display:block;margin:0;padding:0;position:absolute;top:0;left:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{transition:.2s cubic-bezier(.4,0,.2,1);position:absolute;top:0;left:0;z-index:2;border-radius:50%}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;z-index:3;visibility:visible;transform:rotate(360deg)}"]
    })
], MatSearchBarComponent);

let NgMatSearchBarModule = class NgMatSearchBarModule {
};
NgMatSearchBarModule = __decorate([
    NgModule({
        imports: [
            CommonModule,
            FormsModule,
            MatIconModule,
            MatInputModule,
            MatRippleModule,
            //Reactive form
            ReactiveFormsModule
        ],
        exports: [MatSearchBarComponent],
        declarations: [MatSearchBarComponent]
    })
], NgMatSearchBarModule);

/**
 * Generated bundle index. Do not edit.
 */

export { NgMatSearchBarModule, MatSearchBarComponent as ɵa, AbstractControlValueAccessor as ɵb };
//# sourceMappingURL=ng-mat-search-bar.js.map
