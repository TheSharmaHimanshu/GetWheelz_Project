(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/icon'), require('@angular/material/input'), require('@angular/animations')) :
    typeof define === 'function' && define.amd ? define('ng-mat-search-bar', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@angular/material/core', '@angular/material/icon', '@angular/material/input', '@angular/animations'], factory) :
    (global = global || self, factory(global['ng-mat-search-bar'] = {}, global.ng.common, global.ng.core, global.ng.forms, global.ng.material.core, global.ng.material.icon, global.ng.material.input, global.ng.animations));
}(this, (function (exports, common, core, forms, core$1, icon, input, animations) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var AbstractControlValueAccessor = /** @class */ (function () {
        function AbstractControlValueAccessor() {
            /**
             * Invoked when the model has been changed
             */
            this.onChange = function (_) { };
            /**
             * Invoked when the model has been touched
             */
            this.onTouched = function () { };
        }
        /**
         * Method that is invoked on an update of a model.
         */
        AbstractControlValueAccessor.prototype.updateChanges = function () {
            this.onChange(this.value);
        };
        /**
         * Writes a new item to the element.
         * @param value the value
         */
        AbstractControlValueAccessor.prototype.writeValue = function (value) {
            this.value = value;
            this.updateChanges();
        };
        /**
         * Registers a callback function that should be called when the control's value changes in the UI.
         * @param fn
         */
        AbstractControlValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        /**
         * Registers a callback function that should be called when the control receives a blur event.
         * @param fn
         */
        AbstractControlValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        return AbstractControlValueAccessor;
    }());

    var MatSearchBarComponent = /** @class */ (function (_super) {
        __extends(MatSearchBarComponent, _super);
        function MatSearchBarComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.placeholder = '';
            _this.onBlur = new core.EventEmitter();
            _this.onClose = new core.EventEmitter();
            _this.onEnter = new core.EventEmitter();
            _this.onFocus = new core.EventEmitter();
            _this.onOpen = new core.EventEmitter();
            _this.searchVisible = false;
            return _this;
        }
        MatSearchBarComponent_1 = MatSearchBarComponent;
        MatSearchBarComponent.prototype.close = function () {
            this.searchVisible = false;
            this.value = '';
            this.updateChanges();
            this.onClose.emit();
        };
        MatSearchBarComponent.prototype.open = function () {
            this.searchVisible = true;
            this.inputElement.nativeElement.focus();
            this.onOpen.emit();
        };
        MatSearchBarComponent.prototype.onBlurring = function (searchValue) {
            if (!searchValue) {
                this.searchVisible = false;
            }
            this.onBlur.emit(searchValue);
        };
        MatSearchBarComponent.prototype.onEnterring = function (searchValue) {
            this.onEnter.emit(searchValue);
        };
        MatSearchBarComponent.prototype.onFocussing = function (searchValue) {
            this.onFocus.emit(searchValue);
        };
        var MatSearchBarComponent_1;
        __decorate([
            core.ViewChild('input', { static: false })
        ], MatSearchBarComponent.prototype, "inputElement", void 0);
        __decorate([
            core.Input()
        ], MatSearchBarComponent.prototype, "formControl", void 0);
        __decorate([
            core.Input()
        ], MatSearchBarComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Output()
        ], MatSearchBarComponent.prototype, "onBlur", void 0);
        __decorate([
            core.Output()
        ], MatSearchBarComponent.prototype, "onClose", void 0);
        __decorate([
            core.Output()
        ], MatSearchBarComponent.prototype, "onEnter", void 0);
        __decorate([
            core.Output()
        ], MatSearchBarComponent.prototype, "onFocus", void 0);
        __decorate([
            core.Output()
        ], MatSearchBarComponent.prototype, "onOpen", void 0);
        MatSearchBarComponent = MatSearchBarComponent_1 = __decorate([
            core.Component({
                selector: 'mat-search-bar',
                template: "<mat-form-field *ngIf=\"!formControl\" class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" [placeholder]=\"placeholder\" [(ngModel)]=\"value\" (ngModelChange)=\"updateChanges()\"\n    (blur)=\"onBlurring(input.value)\" (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n<!-- FORM CONTROL WAY -->\n<mat-form-field *ngIf=\"formControl\" class=\"mat-search_field\" [@slideInOut]=\"searchVisible\">\n  <input #input matInput type=\"text\" [placeholder]=\"placeholder\" [formControl]=\"formControl\" (blur)=\"onBlurring(input.value)\"\n    (keyup.enter)=\"onEnterring(input.value)\" (focus)=\"onFocussing(input.value)\" />\n</mat-form-field>\n\n\n<span class=\"mat-search_icons\" [class.mat-search_icons--active]=\"searchVisible\">\n  <mat-icon class=\"mat-search_icon-close\" (click)=\"close()\" matRipple>close</mat-icon>\n  <mat-icon class=\"mat-search_icon-search\" (click)=\"open()\" matRipple>search</mat-icon>\n</span>\n",
                animations: [
                    animations.trigger('slideInOut', [
                        animations.state('true', animations.style({ width: '*' })),
                        animations.state('false', animations.style({ width: '0' })),
                        animations.transition('true => false', animations.animate('300ms ease-in')),
                        animations.transition('false => true', animations.animate('300ms ease-out'))
                    ])
                ],
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return MatSearchBarComponent_1; }),
                        multi: true
                    }
                ],
                styles: [":host{position:relative;display:flex;flex-direction:row;align-items:center;justify-content:flex-end;width:24px;height:24px}.mat-search_field{position:absolute;z-index:1;padding:0 24px 0 0}.mat-search_icons{display:block;margin:0;padding:0;position:absolute;top:0;left:0}.mat-search_icons:hover{cursor:pointer}.mat-search_icons .mat-search_icon-close,.mat-search_icons .mat-search_icon-search{transition:.2s cubic-bezier(.4,0,.2,1);position:absolute;top:0;left:0;z-index:2;border-radius:50%}.mat-search_icons .mat-search_icon-close,.mat-search_icons.mat-search_icons--active .mat-search_icon-search{opacity:0;transform:rotate(225deg)}.mat-search_icons.mat-search_icons--active .mat-search_icon-close{opacity:1;z-index:3;visibility:visible;transform:rotate(360deg)}"]
            })
        ], MatSearchBarComponent);
        return MatSearchBarComponent;
    }(AbstractControlValueAccessor));

    var NgMatSearchBarModule = /** @class */ (function () {
        function NgMatSearchBarModule() {
        }
        NgMatSearchBarModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    icon.MatIconModule,
                    input.MatInputModule,
                    core$1.MatRippleModule,
                    //Reactive form
                    forms.ReactiveFormsModule
                ],
                exports: [MatSearchBarComponent],
                declarations: [MatSearchBarComponent]
            })
        ], NgMatSearchBarModule);
        return NgMatSearchBarModule;
    }());

    exports.NgMatSearchBarModule = NgMatSearchBarModule;
    exports.ɵa = MatSearchBarComponent;
    exports.ɵb = AbstractControlValueAccessor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-mat-search-bar.umd.js.map
